/* 
   Autor: Henrique H. Vedoveli
   Data da Ultima Modificacao: 12/abril/2024

   Descricao:
   Cada processo correto executa testes até achar outro processo correto.
   Lembre-se de tratar o caso em que todos os demais processos estão falhos. 
   Imprimir os testes e resultados.
*/

#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

// Definindo os eventos
#define test 1
#define fault 2
#define recovery 3

// Definindo o descritor do processo

typedef struct{ 
   int id;           
} TipoProcesso;

TipoProcesso *processo;

int main (int argc, char *argv[]) {
   
   static int N,  
            token,  
            event, 
            r,
            i,
            proximoProcesso,
            MaxTempoSimulac = 150;

   static char fa_name[5];

   if (argc != 2) {
       puts("Uso correto: tempo <num de processos>");
       exit(1);
    }

   N = atoi(argv[1]);

   smpl(0, "Um Exemplo de Simulacao");
   reset();
   stream(1);

   // inicializando os processos

   processo = (TipoProcesso *) malloc(sizeof(TipoProcesso)*N);

   for (i=0; i<N; i++) {
      memset(fa_name, '\0', 5);
      sprintf(fa_name, "%d", i);
      processo[i].id = facility(fa_name,1);
   }


    // Escalonando os eventos
    for (i=0; i<N; i++) {
       schedule(test, 30.0, i); 
    }
    schedule(fault, 31.0, 1);
    schedule(recovery, 61.0, 1);

    // agora vem o loop principal do simulador

    puts("===============================================================");
    puts("           Sistemas Distribuidos Prof. Elias");
    puts("          LOG do Trabalho Pratico 0, Tarefa 2");
    printf("   Este programa foi executado para: N=%d processos.\n", N); 
    printf("           Tempo Total de Simulacao=%d\n", MaxTempoSimulac);
    puts("===============================================================");

    while(time() < MaxTempoSimulac) {
         cause(&event, &token);
         switch(event) {
           case test: 
               if (status(processo[token].id) !=0) break; 
               proximoProcesso = (token+1)%N;

               for (i=0; i<N; i++){
                  if(status(processo[proximoProcesso].id) != 0) {
                     printf("Processo %d testou o processo %d falho no tempo %5.1f\n", token, proximoProcesso, time());
                     proximoProcesso++;
                  }
                  else if(proximoProcesso!=token){
                     printf("Processo %d testou o processo %d correto no tempo %5.1f\n", token, proximoProcesso, time());
                     break;
				      }
                  if (i == N) {
                  printf("O processo %d correto testou todos os processos falhos\n", token);
                     }
               } //for loop

              
               schedule(test, 30.0, token);
               break;
           case fault:
               r = request(processo[token].id, token, 0);
               printf("O processo %d vai falhar no tempo %4.1f\n", token, time());
               break;
           case recovery:
               release(processo[token].id, token);
               printf("O processo %d vai recuperar no tempo %4.1f\n", token, time());
               schedule(test, 1.0, token);
               break;
          } // switch
    } // while
} // tempo.c
        
