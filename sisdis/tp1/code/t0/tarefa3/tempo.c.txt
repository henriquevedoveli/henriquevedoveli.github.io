/* 
   Autor: Henrique H. Vedoveli
   Data da Ultima Modificacao: 11/abril/2024

   Descricao:  
   Cada processo mantém localmente o vetor State[N]. A entrada do vetor State[j] indica o estado do processo j.
   O estado de cada processo pode ser: -1 (unknown), 0 (correto) ou 1 (falho). 
   Inicialize (para todos os processos) o State[N] com -1 (indicando estado “unknown”) para todos os demais processos e 0 para o próprio processo. 
   Nesta tarefa ao executar um teste em um processo j, o testador atualiza a entrada correspondente no vetor State[j].
    Em cada intervalo de testes, mostre o vetor State[N].
*/

#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

// Definindo os eventos
#define test 1
#define fault 2
#define recovery 3

// Definindo estados dos processo
#define unknown -1 
#define correto 0 
#define falho 1

// Definindo o descritor do processo
typedef struct{ 
   int id;
   // Vetor para armezar estados dos processos
   int *STATE;
} TipoProcesso;

TipoProcesso *processo;

int main (int argc, char *argv[]) {
   
   static int N,  
            token,  
            event, 
            r,
            i,
            proximoProcesso,
            MaxTempoSimulac = 150;

   static char fa_name[5];

   if (argc != 2) {
       puts("Uso correto: tempo <num de processos>");
       exit(1);
    }

   N = atoi(argv[1]);

   smpl(0, "Um Exemplo de Simulacao");
   reset();
   stream(1);

   // inicializando os processos

   processo = (TipoProcesso *) malloc(sizeof(TipoProcesso)*N);

   for (i=0; i<N; i++) {
      memset(fa_name, '\0', 5);
      sprintf(fa_name, "%d", i);
      processo[i].id = facility(fa_name,1);

      processo[i].STATE = (int*) malloc(sizeof(int)*N); 

		// Assumindo que o processo i eh correto
		processo[i].STATE[i] = correto;

		// Inicializa os valores dos outros processos como desconhecidos
		for(int j = 1; j < N; j++){ 
			processo[i].STATE[j] = unknown;
      }
   }


    // Escalonando os eventos
    for (i=0; i<N; i++) {
       schedule(test, 30.0, i); 
    }
    schedule(fault, 31.0, 1);
    schedule(recovery, 61.0, 1);

    // agora vem o loop principal do simulador

    puts("===============================================================");
    puts("           Sistemas Distribuidos Prof. Elias");
    puts("          LOG do Trabalho Pratico 0, Tarefa 3");
    printf("   Este programa foi executado para: N=%d processos.\n", N); 
    printf("           Tempo Total de Simulacao=%d\n", MaxTempoSimulac);
    puts("===============================================================");

    while(time() < MaxTempoSimulac) {
         cause(&event, &token);
         switch(event) {
           case test: 
               if (status(processo[token].id) !=0) break; 
               proximoProcesso = (token+1)%N;

               printf("\n\n");
               printf("STATE de %d: ", token);
               for(int j = 0; j < N; j++){
					   printf("%d ", processo[token].STATE[j]);
               }
               printf("\n");

               for (i=0; i<N; i++){
                  if(status(processo[proximoProcesso].id) != 0) {
                     printf("Processo %d testou o processo %d falho no tempo %5.1f\n", token, proximoProcesso, time());

                     // Atualizando o valor de STATE[proximoProcesso] para 1 (falho)
                     printf("Atualizando o valor de STATE do processo %d para falho\n", proximoProcesso);
                     processo[token].STATE[proximoProcesso] = falho;

                     proximoProcesso++;
                  }
                  else if(proximoProcesso!=token){
                     printf("Processo %d testou o processo %d correto no tempo %5.1f\n", token, proximoProcesso, time());

                     // Atualizando o valor de STATE[proximoProcesso] para 0 (correto)
                     printf("Atualizando o valor de STATE do processo %d para correto\n", proximoProcesso);
                     processo[token].STATE[proximoProcesso] = correto;

                     break;
				      }
                  if (i == N) {
                  printf("O processo %d correto testou todos os processos falhos\n", token);
                     }
               } //for loop

              
               schedule(test, 30.0, token);
               break;
           case fault:
               r = request(processo[token].id, token, 0);
               printf("\n\nO processo %d vai falhar no tempo %4.1f\n", token, time());
               break;
           case recovery:
               release(processo[token].id, token);
               printf("\n\nO processo %d vai recuperar no tempo %4.1f\n", token, time());
               schedule(test, 1.0, token);
               break;
          } // switch
    } // while
} // tempo.c
        
